<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Autofac.Windows</name>
    </assembly>
    <members>
        <member name="T:Prism.Autofac.AutofacServiceLocatorAdapter">
            <summary>
            Defines a <see cref="T:Autofac.IContainer"/> adapter for the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> interface to be used by the Prism Library.
            </summary>
        </member>
        <member name="M:Prism.Autofac.AutofacServiceLocatorAdapter.#ctor(Autofac.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Prism.Autofac.AutofacServiceLocatorAdapter"/>.
            </summary>
            <param name="container">The <see cref="T:Autofac.IContainer"/> that will be used
            by the <see cref="M:Prism.Autofac.AutofacServiceLocatorAdapter.DoGetInstance(System.Type,System.String)"/> and <see cref="M:Prism.Autofac.AutofacServiceLocatorAdapter.DoGetAllInstances(System.Type)"/> methods.</param>
        </member>
        <member name="M:Prism.Autofac.AutofacServiceLocatorAdapter.DoGetInstance(System.Type,System.String)">
            <summary>
            Resolves the instance of the requested service.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Prism.Autofac.AutofacServiceLocatorAdapter.DoGetAllInstances(System.Type)">
            <summary>
            Resolves all the instances of the requested service.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>Sequence of service instance objects.</returns>
        </member>
        <member name="T:Prism.Autofac.Windows.PrismAutofacApplication">
            <summary>
            Provides the base class for the Windows Store Application object which
            includes the automatic creation and wiring of the Autofac container and 
            the bootstrapping process for Prism services in the container.
            </summary>
        </member>
        <member name="P:Prism.Autofac.Windows.PrismAutofacApplication.Current">
            <summary>
            Allow strongly typed access to the Application as a global
            </summary>
        </member>
        <member name="P:Prism.Autofac.Windows.PrismAutofacApplication.Container">
            <summary>
            Get the IoC Autofac Container 
            </summary>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.Resolve(System.Type)">
            <summary>
            Implements and seals the Resolves method to be handled by the Autofac Container.
            Use the container to resolve types (e.g. ViewModels and Flyouts) so their dependencies get injected
            </summary>
            <param name="type">The type.</param>
            <returns>A concrete instance of the specified type.</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.CreateContainerBuilder">
            <summary>
            Creates the <see cref="T:Autofac.ContainerBuilder"/> that will be used to create the default container.
            </summary>
            <returns>A new instance of <see cref="T:Autofac.ContainerBuilder"/>.</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.CreateContainer(Autofac.ContainerBuilder)">
            <summary>
            Creates the <see cref="T:Autofac.IContainer"/> that will be used as the default container.
            For optimal performance, configuration should be completed before creating the container.
            </summary>
            <returns>A new instance of <see cref="T:Autofac.IContainer"/>.</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            Configures Prism services in the container
            </summary>
            <param name="builder">The ContainerBuilder instance that is used to</param>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.CreateNavigationService(Prism.Windows.Navigation.IFrameFacade,Prism.Windows.AppModel.ISessionStateService)">
            <summary>
            Creates the nav service through the base class and gets it registered with the container
            </summary>
            <param name="rootFrame">The frame where nav happens</param>
            <param name="sessionStateService">The session state service that stores nav state on suspend.</param>
            <returns>The NavigationService instance</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.OnCreateDeviceGestureService">
            <summary>
            Creates the DeviceGestureService through the container
            </summary>
            <returns>DeviceGestureService</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.OnCreateEventAggregator">
            <summary>
            Creates the IEventAggregator through the container
            </summary>
            <returns>IEventAggregator</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.OnCreateSessionStateService">
            <summary>
            Creates the SessionStateService through the container
            </summary>
            <returns>SessionStateService</returns>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.CreateAndConfigureContainer">
            <summary>
            Creates and configures the Autofac container
            </summary>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.ConfigureServiceLocator">
            <summary>
            Sets up the ServiceLocator to use the Autofac container for any creation of types
            </summary>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.RegisterTypeIfMissing``2(Autofac.ContainerBuilder,System.Boolean)">
            <summary>
            Registers a type in the container only if that type was not already registered.
            </summary>
            <typeparam name="TFrom">The interface type to register.</typeparam>
            <typeparam name="TTarget">The type implementing the interface.</typeparam>
            <param name="builder">The <see cref="T:Autofac.ContainerBuilder"/> instance.</param>
            <param name="registerAsSingleton">Registers the type as a singleton.</param>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.RegisterTypeIfMissing(System.Type,System.Type,System.Boolean)">
            <summary>
            Registers a type in the container only if that type was not already registered,
            after the container is already created.
            Uses a new ContainerBuilder instance to update the Container.
            </summary>
            <param name="fromType">The interface type to register.</param>
            <param name="toType">The type implementing the interface.</param>
            <param name="registerAsSingleton">Registers the type as a singleton.</param>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.RegisterInstance``1(``0,System.Type,System.String,System.Boolean)">
            <summary>
            Registers an object instance in the container after the container is already created.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="fromType">The interface type to register.</param>
            <param name="key">Optional key for registration.</param>
            <param name="registerAsSingleton">Registers the type as a singleton.</param>
        </member>
        <member name="M:Prism.Autofac.Windows.PrismAutofacApplication.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
